#!/bin/bash

localHost=${0%/build}/;
[[ $localHost == "/" ]] && localHost="";

declare -i noops=1 main=0;

compileOptions="";

boot="$@";

while [[ ${1:0:1} == - ]]; do

if [[ "${1}" =~ -(-help|h) ]]; then cat <<EOF

build Help menu

Using the following switches, allows you to blend your beans on-demand
as a single command call. You can use shell scripts or other tools to
generate your application profiles.

--suite NAME OR CURRENT_NAME:NEW_NAME

-  set compiler script suite name, this feature is optional.
  
--main SCRIPT [ROOT]

-  include main script (call once, usually first or after --raw)

--raw /path/to/raw/file

-  include raw content. specify as many --raw opts as you need.

--unit /path/to/file path.of.unit

-  include a unit. specify as many --unit opts as you need.
  
--port /path/to/file: module.path.name, new.module.path.name

-  port a module or unit via key-sync. specify as many --port opts as you need.
-  this feature is like the unit feature, but you can change the root path of
-  the unit throughought the module.
  
OR YOU CAN CHOOSE: HOUSE-ROOT-BLEND (WHICH IS OUR FAVORITE RECIPE)

build SCRIPT ROOT OR null: ROOT

EOF

# BASH/MAKE MASTER 4 LIFE: SUCKA

  exit 1 #!/bin/bash -c script-lane

fi;

  if [[ ${1} == --suite ]]; then
    let noops=0
    SuiteOptions="$compileOptions $1 $2"; # compiler default: --suite jCafe
    # this is the jCafe like name, where the modules are installed at runtime.
    # the port function of the compiler uses this for context info on porting.
    shift 2; continue;
  fi;

  if [[ ${1} == --port ]]; then
    [[ "$2" =~ \:$ ]] || {
      echo "invalid arguments expected /path/to/module: module.path, new.module.path";
      exit 1;
    } >&2;
    [[ "$3" =~ \,$ ]] || {
      echo "invalid arguments expected /path/to/module: module.path.in.file, new.module.path.in.file";
      exit 1;
    } >&2;
    origin="${2/:/}" oldModule="${3/,/}" newModule="$4";
    compileOptions="$SuiteOptions --port $oldModule: $newModule";
    ${localHost}jscompile $compileOptions `${localHost}treecat "$origin" | ${localHost}jsfilter` || {
      echo "failed to jscompile $compileOptions";
    } >&2;
    let noops=0
    shift 4;
    continue;
  fi;

  if [[ ${1} =~ -(-main|m) ]]; then
    ((main == 0)) || {
      echo "invalid arguments main has already been supplied";
      exit 1;
    } >&2;  
    let noops=0
    let main=1;
    ${localHost}jscompile $SuiteOptions --main "$2" `${localHost}treecat "$3" | ${localHost}jsfilter`
    echo
    shift 2;
    continue;
  fi;

  if [[ ${1} =~ -(-raw|r) ]]; then
    let noops=0
    ${localHost}jscompile $SuiteOptions --raw "$2";
    shift 2;
    continue;
  fi;
    
  if [[ ${1} =~ -(-unit|u) ]]; then
    let noops=0
    ${localHost}jscompile $SuiteOptions --unit "$2" "${3}";
    shift 3;
    continue;
  fi;

  echo "Sorry, build has no knowldege of what $1 means" >&2;
  exit 1;
  
done;

(($# == 2)) && { # arguments
  ${localHost}jscompile $SuiteOptions `(echo "$1"; ${localHost}treecat "$2") | ${localHost}jsfilter`
  echo;
}

echo '/*' Enjoy: jCafe Custom Blend:
echo
echo build $boot\;
printf \
  "\n%s\n*/" \
"                                                --Hypersoft-Systems: U.-S.-A."

