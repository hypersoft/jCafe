#!/bin/bash

# let 1 = HeadScript
# let 2 = Flavor
# for each directory in Flavor[.../target?]: directory = module, jsfiles = module[units]
# result: HeadScript.module.unit/module++

# sample: build jCafe from the root directory: bin/build jCafe.js library

localHost=${0%/build}/;
[[ $localHost == "/" ]] && localHost="";

declare -i noops=1 main=0;

compileOptions="";

while [[ ${1:0:2} == -- ]]; do

  if [[ ${1} == --suite ]]; then
    let noops=0
    SuiteOptions="$compileOptions $1 $2"; # compiler default: --suite jCafe
    # this is the jCafe like name, where the modules are installed at runtime.
    # the port function of the compiler uses this for context info on porting.
    shift 2; continue;
  fi;

  if [[ ${1} == --port ]]; then
    [[ "$2" =~ \:$ ]] || {
      echo "invalid arguments expected /path/to/module: module.path, new.module.path";
      exit 1;
    } >&2;
    [[ "$3" =~ \,$ ]] || {
      echo "invalid arguments expected /path/to/module: module.path.in.file, new.module.path.in.file";
      exit 1;
    } >&2;
    origin="${2/:/}" oldModule="${3/,/}" newModule="$4";
    compileOptions="$SuiteOptions --port $oldModule: $newModule";
    ${localHost}jscompile $compileOptions `${localHost}treecat "$origin" | ${localHost}jsfilter` || {
      echo "failed to jscompile $compileOptions";
    } >&2;
    let noops=0
    shift 4;
    continue;
  fi;

  if [[ ${1} =~ -(-main|m) ]]; then
    ((main == 0)) || {
      echo "invalid arguments main has already been supplied";
      exit 1;
    } >&2;  
    let noops=0
    let main=1;
    ${localHost}jscompile $SuiteOptions --main "$2" `${localHost}treecat "$origin" | ${localHost}jsfilter`
    shift 2;
    continue;
  fi;

  if [[ ${1} =~ -(-raw|r) ]]; then
    let noops=0
    ${localHost}jscompile $SuiteOptions --raw "$2";
    shift 2;
    continue;
  fi;
    
  if [[ ${1} =~ -(-unit|u) ]]; then
    let noops=0
    ${localHost}jscompile $SuiteOptions --unit "$2" "$3";
    shift 3;
    continue;
  fi;

  echo "Sorry, i don't know what $1 means" >&2;
  exit 1;
  
done;

(($# == 2)) && { # arguments
  ${localHost}jscompile $SuiteOptions `(echo "$1"; ${localHost}treecat "$2") | ${localHost}jsfilter`
  echo;
}

echo '/*' Enjoy: jCafe Custom Blend
printf \
  "\n%s\n*/" \
"                                                --Hypersoft-Systems: U.-S.-A."

