#!/bin/bash
shopt -s extglob;

DATE_FORMAT="--rfc-3339=seconds";

Suite=jCafe from="" to="";

file-time() {
  echo [source-checkpoint: $(date $DATE_FORMAT -r $1)];
}

now-time() {
  date "$DATE_FORMAT";
}

fixName.swapDots() {
  echo ${1//\//.}
}

fixName.killExtension() {
  echo ${1%.js}
}

fixName() {
  fixName.swapDots $(fixName.killExtension ${1#./})
}

function trim {
awk '{a[NR]=$0;if($0 && !s)s=NR;}
    END{e=NR;
        for(i=NR;i>1;i--) 
            if(a[i]){ e=i; break; } 
        for(i=s;i<=e;i++)
            print a[i];}' /dev/stdin
}

function output {
  if [[ -n "$from" ]]; then
   trim | sed s/$from/$to/g;
  else
   trim;
  fi;
}

now=$(now-time);
stamp=$(date +%s);

while [[ ${1:0:1} == - ]]; do
  if [[ ${1} == --suite ]]; then
    Suite="$2";
    if [[ "$Suite" =~ .+:.+ ]]; then
      from="${Suite%:*}" to="${Suite#*:}"
    fi;
    shift 2; continue;
  fi;
  
  if [[ ${1} == --port ]]; then
    [[ "$2" =~ \:$ ]] || {
      echo jscompile: invalid arguments expected /path/to/module: module.path, new.module.path
      exit 1;
    } >&2;
    port="${3}" root="${2/:/}";
    shift 3;
    continue;
  fi;

  if [[ ${1} =~ -(-raw|r) ]]; then
    echo // jCafe Raw Resource: snapshot-date: $now
    echo
    cat "$2" | output;
    shift 2;
    continue;
  fi;

  if [[ ${1} =~ -(-main|m) ]]; then
    echo
    if [[ -n "$from" ]]; then
    echo // Mock Module mocking: $from as $to: build-date: $now
    echo
    else
    echo // Main Module ${Suite}: build-date: $now
    echo
    fi;
    cat "$2" | output;
    shift 2;
    continue;
  fi;

  if [[ ${1} =~ -(-unit|u) ]]; then
    file="${2%:}"
    echo // Origin: `fixName $file` $(file-time ${file})
    echo
    cat "$file" | output;
    shift 3;
    continue;
  fi;
  

  echo "Sorry, jscompile has no knowledge of what $1 means" >&2;
  exit 1;

done

[[ $# == 0 ]] && exit;

echo
if [[ -n "$port" ]]; then
  echo // $Suite Module Porter: port-date: $now
else
  echo // $Suite Module Builder: build-date: $now
fi
echo

echo var jCafeBuildDate = $stamp\; // \(${#@} units included\)

for arg; do
  echo
  if [[ -n "$port" ]]; then
    echo // Origin: Port: `fixName $arg`, $port $(file-time $arg)
  else
    echo // Origin: `fixName $arg` $(file-time $arg)
  fi
  cat $arg | output; 
done | {
  if [[ -n "$port" ]]; then
    sed s/[^.]$root./$port./g;
  else
    cat
  fi;
}
