#!/bin/bash

. STATS;

LINE_BUFFER="                                                                                ";

STAT_NAMES="RELEASE VERSION";

opt.write-stats() {
  opt.dump-stats > STATS;
}

opt.dump-stats() {
  declare -p $STAT_NAMES | sed "s/declare -- //g";
} 2>/dev/null;

shopt -s extglob;

opt.commit-jcafe() {
  opt.commit "x-jcafe: ${*-update}" jCafe.js;
  [[ $# == 0 ]] && git commit --amend;
  return $#;
}

opt.commit-studio() {
  opt.commit "x-jcafe-studio: ${*-update}" $0;
  [[ $# == 0 ]] && git commit --amend;
  return $#;
}

opt.commit-blender() {
  opt.commit "x-jcafe-blender: ${*-update}" bin/{build,jscompile};
  [[ $# == 0 ]] && git commit --amend;
  return $#;
}

opt.commit-readme() {
  opt.commit "${*-Wise Franchise Guys}" README.MD;
  [[ $# == 0 ]] && git commit --amend;
  return $#;
}

opt.amend-commit() {
  git commit --amend;
}

opt.commit() {
  # message files...
  if git add -v "${@:2:$#}"; then
    git commit -vm "$1";
  else
    exit $?;
  fi;
  return $#;
}


opt.get-release-name() {
  echo "$pkgRelName";
}

setReleaseName() {
  true;
}

opt.set-version() {

  if [[ $# == 0 ]]; then
    read -p "Enter Version: " -i $VERSION VERSION;
  else
    VERSION=$1;    
  fi;
  if [[ $# == 0 || $# == 1 ]]; then
    read -p "Enter Release Name: " -i $RELEASE RELEASE;  
  else
    RELEASE="$2";  
  fi;
  
  opt.write-stats;

  cat README.MD | {
    read line;
    echo "# jCafe $RELEASE $VERSION"
    cat
  } > README.MD.new;

  cp -u README.MD.new README.MD;
  rm README.MD.new;

  cat jCafe.js | {
    read line;
    echo "$line"
    read line;
    out1=" * javascript:jCafe - $RELEASE"
    out2="($VERSION)"
    padding=${LINE_BUFFER:1:$((${#LINE_BUFFER} - ${#out1} - ${#out2}))};
    echo "$out1$padding$out2";
    cat;
  } > jCafe.js.new;

  cp -u jCafe.js.new jCafe.js;
  rm jCafe.js.new;

  $0 --commit "Checkpoint: $VERSION; $RELEASE" README.MD jCafe.js STATS;  
  
  return 1 # == arguments processed
  
}

declare optionContext=${0##*/};
while [[ "${1}" =~ ^(--|-)([a-zA-Z0-9-]+)(=|[$IFS]+)?(.+)?$ ]]; do
  if declare -f opt.${BASH_REMATCH[2]} > /dev/null; then shift;
    declare switchId=${BASH_REMATCH[2]} optValue=${BASH_REMATCH[4]};
    if [[ -n "$optValue" ]]; then opt.$switchId "$optValue" "$@";
    else opt.$switchId "$@"; fi;
    declare -i args=$?;
    [[ -n "$optValue" ]] && let args--; # if the value taxied, post the fare
    if ((args != 0)); then shift $args; continue; fi;
  else
    echo "Sorry, $optionContext has no knowledge of what "$1" means" >&2;
    echo "You might have joined an option value to an option switch without an \$IFS separator or =" >&2;
    exit 1;
  fi;
done;

